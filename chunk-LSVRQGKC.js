import{i as o}from"./chunk-GO5H5FWT.js";import{Od as u,a as s,ca as l,ha as c,n as d}from"./chunk-ONE5RFGK.js";var p=class a{constructor(e){this.storageService=e;this.loadCredentials()}storageKey="identity-workbench-credentials";credentialsSubject=new d([]);credentials$=this.credentialsSubject.asObservable();loadCredentials(){let e=this.storageService.get(this.storageKey)||[];this.credentialsSubject.next(e)}saveCredentials(e){this.storageService.set(this.storageKey,e),this.credentialsSubject.next(e)}getAllCredentials(){return this.credentials$}getCredentialById(e){return this.credentialsSubject.value.find(i=>i.id===e)}getCredentialsByIssuer(e){return this.credentialsSubject.value.filter(t=>t.issuer===e)}getCredentialsBySubject(e){return this.credentialsSubject.value.filter(t=>t.subject===e)}addCredential(e){let i={id:e.id||o(),type:e.type||"VerifiableCredential",issuer:e.issuer||"",issuanceDate:e.issuanceDate||new Date,expirationDate:e.expirationDate,subject:e.subject||"",credentialSubject:e.credentialSubject||{},rawCredential:e.rawCredential||{},revoked:!1,name:e.name||`Credential ${this.credentialsSubject.value.length+1}`,description:e.description||"",jwt:e.jwt||"",decodedJwt:e.decodedJwt||null},r=[...this.credentialsSubject.value,i];return this.saveCredentials(r),i}updateCredential(e,t){let i=this.credentialsSubject.value,r=i.findIndex(v=>v.id===e);if(r===-1)throw new Error(`Credential with id ${e} not found`);let n=s(s({},i[r]),t),C=[...i.slice(0,r),n,...i.slice(r+1)];return this.saveCredentials(C),n}deleteCredential(e){let i=this.credentialsSubject.value.filter(r=>r.id!==e);this.saveCredentials(i)}revokeCredential(e){this.credentialsSubject.value.findIndex(r=>r.id===e)!==-1&&this.updateCredential(e,{revoked:!0})}importCredential(e){try{let t=e.vc;if(!t||!t.id||!t.type||!t.issuer||!t.credentialSubject)return null;let i=t.issuanceDate?new Date(t.issuanceDate):new Date,r=t.expirationDate?new Date(t.expirationDate):void 0,n=typeof t.credentialSubject.id=="string"?t.credentialSubject.id:"";return this.addCredential({id:t.id,type:Array.isArray(t.type)?t.type[1]||t.type[0]:t.type,issuer:typeof t.issuer=="string"?t.issuer:t.issuer.id,issuanceDate:i,expirationDate:r,subject:n,credentialSubject:t.credentialSubject,rawCredential:t,name:`Imported ${Array.isArray(t.type)?t.type[1]||"Credential":t.type}`,description:`Imported on ${new Date().toLocaleString()}`,jwt:e.jwt,decodedJwt:e.decoded})}catch(t){return console.error("Error importing credential:",t),null}}verifyCredential(e){return!e||!e.id||!e.type||!e.issuer||!e.credentialSubject?{valid:!1,message:"Invalid credential format"}:e.expirationDate&&new Date(e.expirationDate)<new Date?{valid:!1,message:"Credential has expired"}:{valid:!0,message:"Credential format is valid. Full cryptographic verification not implemented in demo."}}loadFromStorage(){this.loadCredentials()}static \u0275fac=function(t){return new(t||a)(c(u))};static \u0275prov=l({token:a,factory:a.\u0275fac,providedIn:"root"})};export{p as a};
